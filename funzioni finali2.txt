CREATE OR REPLACE FUNCTION convruolo(ruoli IN VARCHAR(100))
RETURNS VARCHAR(20) AS 
$$
DECLARE
	pos INT;
	ruolo VARCHAR(20);
BEGIN
	pos := POSITION('_' IN ruoli);

	IF pos > 0 THEN
		ruolo := SUBSTRING(ruoli FROM 1 FOR pos - 1);
	ELSE
		ruolo := ruoli;
	END IF;

	RETURN ruolo;
END;
$$
LANGUAGE plpgsql;

------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ricercapereta(valore IN INTEGER)
RETURNS VARCHAR(500000) AS
$$
DECLARE
    lista VARCHAR(500000) := '';
    giocatore_row calciatore%ROWTYPE;
    dataRi VARCHAR(50) := '';
    valoreMe VARCHAR(50) := '';
    query_sql VARCHAR(200);
BEGIN
    -- Costruisci la query di base
    query_sql := 'SELECT * FROM CALCIATORE WHERE EXTRACT(YEAR FROM AGE(current_date, nascita)) = $1';
	
    -- Esegui la query parametrica
    FOR giocatore_row IN EXECUTE query_sql USING valore
    LOOP
		IF giocatore_row.dataRitiro IS NULL THEN
			dataRi := 'Indefinito';
		ELSE
			dataRi := CAST(giocatore_row.dataRitiro AS VARCHAR(10));
		END IF;
		IF giocatore_row.valoreMercato IS NULL THEN
			valoreME := 'Indefito';
		ELSE
			valoreME := CAST(giocatore_row.valoreMercato AS VARCHAR(10));
		END IF;
	
		IF lista = '' THEN
			lista := giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(EXTRACT(YEAR FROM AGE(current_date, giocatore_row.nascita)) AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;         
		ELSE             
			lista := lista || ',' || giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(EXTRACT(YEAR FROM AGE(current_date, giocatore_row.nascita)) AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;
		END IF;
    END LOOP;
	
	IF lista = '' THEN
		RAISE EXCEPTION 'Non esiste un giocatore con quest et√†';
	END IF;
    -- Restituisci tutte le tuple
    RETURN lista;
END;
$$
LANGUAGE plpgsql;

-----------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ricercapergoalsegnati(goal IN INTEGER)
RETURNS VARCHAR(1000000) AS
$$
DECLARE
	giocatore_info RECORD;
	return_value VARCHAR(1000000) := '';
BEGIN
    FOR giocatore_info IN
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedepr,
            C.nazionalita,
            M.tiriSegnati
        FROM CALCIATORE AS C
        JOIN MILITANZA AS M ON C.Id_Giocatore = M.giocatore
    LOOP
        IF giocatore_info.tiriSegnati = goal THEN
			return_value := return_value || giocatore_info.nome || ' ' || giocatore_info.cognome || ' ' || giocatore_info.nascita || ' ' || giocatore_info.piedepr || ' ' || giocatore_info.nazionalita || ' ' || giocatore_info.tiriSegnati || ',';
		END IF;
    END LOOP;
    
    RETURN return_value;
END;
$$
LANGUAGE plpgsql;

--------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ricercapergoalsubiti(goal IN INTEGER)
RETURNS VARCHAR(1000000) AS
$$
DECLARE
	giocatore_info RECORD;
	return_value VARCHAR(1000000) := '';
BEGIN
    FOR giocatore_info IN
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedepr,
            C.nazionalita,
            S.goalSubiti
        FROM CALCIATORE AS C
        JOIN GOALSUBITI AS S ON C.Id_Giocatore = S.Id_Giocatore
    LOOP
        IF giocatore_info.goalSubiti = goal THEN
			return_value := return_value || giocatore_info.nome || ' ' || giocatore_info.cognome || ' ' || giocatore_info.nascita || ' ' || giocatore_info.piedepr || ' ' || giocatore_info.nazionalita || ' ' || giocatore_info.goalSubiti || ',';
		END IF;
    END LOOP;
    
    RETURN return_value;
END;
$$
LANGUAGE plpgsql;

---------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ricercaperruolo(ruoli IN VARCHAR(50))
RETURNS VARCHAR(1000000) AS
$$
DECLARE
    giocatore_record RECORD;
	ruoloR VARCHAR(50);
    return_value VARCHAR(1000000) := '';
BEGIN
    FOR giocatore_record IN 
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedePR,
            C.nazionalita,
            R.ruolo
        FROM CALCIATORE AS C
        JOIN RUOLO AS R ON C.Id_Giocatore = R.Id_Giocatore
    LOOP
        -- Utilizza UNNEST per ottenere ciascuna parte del ruolo e con string_to_array suddividiamo la stringa di ruoli ogni volta che trova un '_'
        FOR ruoloR IN SELECT UNNEST(string_to_array(giocatore_record.ruolo, '_'))
        LOOP
            -- Concatena le informazioni se il ruolo corrisponde
            IF ruoloR = ruoli THEN
                return_value := return_value || giocatore_record.nome || ' ' || giocatore_record.cognome || ' ' || CAST(giocatore_record.nascita AS VARCHAR(50)) || ' ' || giocatore_record.piedePR || ' ' || giocatore_record.nazionalita || ' ' || giocatore_record.ruolo || ',';
            END IF;
        END LOOP;
    END LOOP;

    RETURN return_value;
END; 
$$
LANGUAGE plpgsql;

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION ricercapersquadra(valore IN VARCHAR(50))
RETURNS VARCHAR(500000) AS
$$
DECLARE
    lista VARCHAR(500000) := '';
    giocatore_row RECORD;
BEGIN
    -- Costruisci la query di base
    FOR giocatore_row IN 
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedePR,
            C.nazionalita,
            S.NomeSquadra
        FROM CALCIATORE AS C
        JOIN ROSA AS R ON C.Id_Giocatore = R.Id_Giocatore 
		JOIN SQUADRE AS S ON R.Squadra = S.NomeSquadra
    LOOP
		IF giocatore_row.NomeSquadra = valore THEN
			lista := lista || giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.NomeSquadra || ',';
    	END IF;
	END LOOP;
	
	IF lista = '' THEN
		RAISE EXCEPTION 'Non esiste un giocatore in questa squadra';
	END IF;
    -- Restituisci tutte le tuple
    RETURN lista;
END;
$$
LANGUAGE plpgsql;

-----------------------------------------------------------------

CREATE OR REPLACE FUNCTION verification(loginuser IN VARCHAR(50), passuser IN VARCHAR(50))
RETURNS INTEGER AS
$$
DECLARE
    priority_found INT;
BEGIN
    SELECT priority INTO priority_found
    FROM UTENTE
    WHERE UTENTE.login = verification.loginUser AND UTENTE.password = verification.passUser;

    IF FOUND THEN
        RETURN priority_found;
    ELSE
        RETURN -1; -- Utente non trovato
    END IF;
END;
$$
LANGUAGE plpgsql;

-----------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION visualizzacalc(valore IN VARCHAR(50))
RETURNS VARCHAR(500000) AS
$$
DECLARE
    lista VARCHAR(500000) := '';
    giocatore_row calciatore%ROWTYPE;
    dataRi VARCHAR(50) := '';
    valoreMe VARCHAR(50) := '';
    query_sql VARCHAR(200);
BEGIN
    -- Costruisci la query di base
    query_sql := 'SELECT * FROM CALCIATORE WHERE nome = $1';
	
    -- Esegui la query parametrica
    FOR giocatore_row IN EXECUTE query_sql USING valore
    LOOP
		IF giocatore_row.dataRitiro IS NULL THEN
			dataRi := 'Indefinito';
		ELSE
			dataRi := CAST(giocatore_row.dataRitiro AS VARCHAR(10));
		END IF;
		IF giocatore_row.valoreMercato IS NULL THEN
			valoreME := 'Indefinito';
		ELSE
			valoreME := CAST(giocatore_row.valoreMercato AS VARCHAR(10));
		END IF;
	
		IF lista = '' THEN
			lista := giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;         
		ELSE             
			lista := lista || ',' || giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;
		END IF;
    END LOOP;
	
	IF lista = '' THEN
		RAISE EXCEPTION 'Non esiste un giocatore con questo nome';
	END IF;
    -- Restituisci tutte le tuple
    RETURN lista;
END;
$$
LANGUAGE plpgsql;

-----------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION visualizzaperpiedepr(valore IN VARCHAR(50))
RETURNS VARCHAR(500000) AS
$$
DECLARE
    lista VARCHAR(500000) := '';
    giocatore_row calciatore%ROWTYPE;
    dataRi VARCHAR(50) := '';
    valoreMe VARCHAR(50) := '';
    string_sql VARCHAR(200);
BEGIN
    string_sql := 'SELECT * FROM CALCIATORE WHERE piedePR = $1';

    -- Utilizza EXECUTE per eseguire la query parametrica
    FOR giocatore_row IN EXECUTE string_sql USING valore
    LOOP
        IF giocatore_row.dataRitiro IS NULL THEN
			dataRi := 'Indefinito';
		ELSE
			dataRi := CAST(giocatore_row.dataRitiro AS VARCHAR(10));
		END IF;
		IF giocatore_row.valoreMercato IS NULL THEN
			valoreME := 'Indefinito';
		ELSE
			valoreME := CAST(giocatore_row.valoreMercato AS VARCHAR(10));
		END IF;
	
		IF lista = '' THEN
			lista := giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;         
		ELSE             
			lista := lista || ',' || giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;
		END IF;
    END LOOP;

	IF lista = '' THEN
		RAISE EXCEPTION 'Non esiste un giocatore con questo piede preferito';
	END IF;
    -- Restituisci tutte le tuple
    RETURN lista;
END;
$$
LANGUAGE plpgsql;

-------------------------------------------------------------

CREATE OR REPLACE PROCEDURE register(loginuser IN VARCHAR(50), passuser IN VARCHAR(50))AS 
$$ 
BEGIN
    INSERT INTO utente(login, password, priority)
    VALUES (loginUser, passUser, 2);
END;
$$
LANGUAGE plpgsql;

---------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION checkPortiere()
RETURNS TRIGGER AS $$
DECLARE
	ruolo VARCHAR(20);
BEGIN
	ruolo := convRuolo((SELECT R.ruolo FROM RUOLO AS R, CALCIATORE AS C WHERE R.id_giocatore = C.id_giocatore AND C.id_giocatore = NEW.id_giocatore));

	IF ruolo <> 'portiere' THEN
		RAISE EXCEPTION 'Il giocatore che stai inserendo non √® portiere.';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_checkPortiere
BEFORE INSERT OR UPDATE OF goalSubiti ON goalsubiti
FOR EACH ROW
EXECUTE FUNCTION checkPortiere();

----------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION controlla_utente()
RETURNS TRIGGER AS $$
BEGIN
    	IF NOT EXISTS (SELECT 1 FROM utente WHERE login = NEW.login) THEN
        	RETURN NEW;
    	ELSE
        	RAISE EXCEPTION 'Nome Utente gi√† utilizzato';
    	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER insert_utente
BEFORE INSERT ON utente
FOR EACH ROW
EXECUTE FUNCTION controlla_utente();
