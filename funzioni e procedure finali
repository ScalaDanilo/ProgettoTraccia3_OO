CREATE OR REPLACE FUNCTION checkCompetizione(comp varchar(200))
RETURNS VARCHAR(100) AS $$
DECLARE
    tipoComp VARCHAR(100);
BEGIN
    -- Cerca nella tabella delle competizioni nazionali
    SELECT nazione
    INTO tipoComp
    FROM competizioni_nazionali
    WHERE nome = comp;

    -- Se la competizione non è trovata nelle competizioni nazionali, cerca nella tabella delle competizioni non nazionali
    IF tipoComp IS NULL THEN
        SELECT tipo
        INTO tipoComp
        FROM competizioni_non_nazionali
        WHERE nome = comp;
    END IF;

    RETURN tipoComp;
END;
$$ LANGUAGE PLPGSQL;

----------------
CREATE OR REPLACE FUNCTION convRuolo(ruoli VARCHAR(500))
RETURNS VARCHAR(20) AS $$
DECLARE
	pos INT;
	ruolo VARCHAR(20);
BEGIN
	pos := POSITION('_' IN ruoli);

	IF pos > 0 THEN
		ruolo := SUBSTRING(ruoli FROM 1 FOR pos - 1);
	ELSE
		ruolo := ruoli;
	END IF;

	RETURN ruolo;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION genera_id(tabella VARCHAR(100), tupla VARCHAR(100))
RETURNS VARCHAR(20) AS $$
DECLARE
    query varchar;
    num INT;
    id varchar(20);
BEGIN
    query := 'SELECT COALESCE(MAX(CAST(SUBSTRING(' || tupla || ' FROM 5) AS INT)), 0) + 1 FROM ' || tabella;

    EXECUTE query INTO num;

    IF tabella ILIKE 'Militanza' THEN
        id := 'MILI' || LPAD(CAST(num AS VARCHAR), 10, '0');
    ELSIF tabella ILIKE 'Calciatore' THEN
        id := 'CALC' || LPAD(CAST(num AS VARCHAR), 10, '0');
    END IF;

    RETURN id;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendi_lista_nascite(nomeC VARCHAR(100), cognomeC VARCHAR(100))
RETURNS VARCHAR(500) AS $$
DECLARE 
    	listaNascite VARCHAR(500) := '';  
	dataN DATE;	
BEGIN
	--prendo la data di nascita dei giocatori 
    	FOR dataN IN SELECT nascita FROM Calciatore WHERE nome = nomeC AND cognome = cognomeC
    	LOOP
        	listaNascite := listaNascite || '_' || dataN;
    	END LOOP;

    RETURN listaNascite;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendi_solo_feature_disponibili(id_giocatore VARCHAR(100))
RETURNS VARCHAR(1000) AS $$
DECLARE
    	feature feature_caratteristiche%ROWTYPE;
    	stringaDiRitorno VARCHAR(1000) := '';  -- Inizializzo la stringa vuota
BEGIN
   	-- Scorro un for per creare una stringa di feature caratteristiche disponibili
    	FOR feature IN 	SELECT *
                   	FROM feature_caratteristiche
                   	WHERE tipologia NOT IN (SELECT tipo
                                          	FROM giocatore_possiede_feature_caratteristiche
                                          	WHERE giocatore = id_giocatore)
    	LOOP
        	-- Concateno il campo tipologia della feature alla stringa di ritorno
        	stringaDiRitorno := stringaDiRitorno || '_' || feature.tipologia;
    	END LOOP;

    	RETURN stringaDiRitorno;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendi_squadre_idonee(nomeCampionato VARCHAR(100), annoInizio int)
RETURNS VARCHAR(50000) AS $$
DECLARE
	listaSquadreIdonee VARCHAR(50000);
	squadra VARCHAR(100);
	nazionalitaS VARCHAR(100);
BEGIN
	--Se nazionale non è null vuol dire che è una competizione nazione
	IF EXISTS(SELECT 1 FROM competizioni_nazionali WHERE nome LIKE nomeCampionato) THEN

		--prendo tutte le squadre che hanno la nazionalità inserita e che rispettino il massimo
		--e il minimo di giocatori della rosa per partecipare alle competizioni
		
		SELECT nazione INTO nazionalitaS
		FROM competizioni_nazionali
		WHERE nome LIKE nomeCampionato;
		
		FOR squadra IN (SELECT S.nomeSquadra
						FROM squadre AS S
						JOIN Rosa AS R ON S.nomeSquadra = R.Squadra
						WHERE S.nazionalita = nazionalitaS
  							AND EXTRACT(YEAR FROM R.Anno) = annoInizio 
  							AND EXTRACT(MONTH FROM R.Anno) = 6
						GROUP BY S.nomeSquadra
						HAVING COUNT(DISTINCT R.ID_Giocatore) BETWEEN 16 AND 24
  							AND S.nomeSquadra NOT IN (SELECT SGIC.Squadra
    							  	  				  FROM squadra_gioca_in_competizioni_nazionali AS SGIC
    							  	  				  WHERE SGIC.anno = annoInizio))

		LOOP
			IF listaSquadreIdonee IS NULL THEN
				listaSquadreIdonee := squadra;
			ELSE
				listaSquadreIdonee := listaSquadreIdonee || ',' || squadra;
			END IF;		
		END LOOP;
	ELSE
		FOR squadra IN (SELECT squadra
						FROM Rosa AS R
						WHERE EXTRACT(YEAR FROM R.anno) = annoInizio 
							AND EXTRACT(MONTH FROM R.anno) = 6
						GROUP BY R.Squadra
						HAVING COUNT(R.ID_Giocatore) BETWEEN 16 AND 24
							AND R.squadra NOT IN (SELECT SGIC.Squadra
    							      			  FROM squadra_gioca_in_competizioni_non_nazionali AS SGIC
    							      			  WHERE SGIC.anno = annoInizio))
		LOOP
			IF listaSquadreIdonee IS NULL THEN
				listaSquadreIdonee := squadra;
			ELSE
				listaSquadreIdonee := listaSquadreIdonee || ',' || squadra;
			END IF;
		END LOOP;
	END IF;
RETURN listaSquadreIdonee;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiAnni(nomeComp VARCHAR(200))
RETURNS VARCHAR(5000) AS $$

DECLARE
    anni VARCHAR(4);
    listaAnni VARCHAR(5000) := '';
BEGIN
    IF EXISTS (SELECT 1 FROM competizioni_nazionali WHERE nome = nomeComp) THEN
        -- SE LA COMP è NAZIONALE
        FOR anni IN (SELECT DISTINCT c.anno
                     FROM competizioni_nazionali AS c JOIN trofeo_squadra AS t ON t.nome = c.nomeTrofeo AND t.annoVincita = c.annoVincita
                     WHERE c.nome ILIKE nomeComp)
        LOOP
            IF listaAnni = '' THEN
                listaAnni := anni;
            ELSE
                listaAnni := listaAnni || ',' || anni;
            END IF;
        END LOOP;
    ELSE
        FOR anni IN (SELECT DISTINCT c.anno
                     FROM competizioni_non_nazionali AS c JOIN trofeo_squadra AS t ON t.nome = c.nomeTrofeo AND t.annoVincita = c.annoVincita
                     WHERE c.nome ILIKE nomeComp)
        LOOP
            IF listaAnni = '' THEN
                listaAnni := anni;
            ELSE
                listaAnni := listaAnni || ',' || anni;
            END IF;
        END LOOP;
    END IF;

    IF (listaAnni = '') THEN
        RAISE EXCEPTION 'Tutte le competizioni sono finite';
    END IF;

    RETURN listaAnni;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiAnniTrofeo(nomeTrofeo VARCHAR(200))
RETURNS VARCHAR(50000) AS $$
DECLARE
    anni VARCHAR(200);
    lista VARCHAR(50000) := '';
BEGIN
    IF EXISTS (SELECT 1 FROM trofeo_individuale WHERE nome = nometrofeo) THEN
        FOR anni IN SELECT annoVincita 
                    FROM trofeo_individuale 
                    WHERE nome = nometrofeo AND vincitore IS NULL
        LOOP
            IF lista = '' THEN
                lista := anni;
            ELSE
                lista := lista || ',' || anni;
            END IF;
        END LOOP;
    ELSE 
        FOR anni IN SELECT annoVincita 
                    FROM trofeo_squadra
                    WHERE nome = nometrofeo AND squadra IS NULL
        LOOP
            IF lista = '' THEN
                lista := anni;
            ELSE
                lista := lista || ',' || anni;
            END IF;
        END LOOP;
    END IF;
            
    IF lista = '' THEN
        RAISE EXCEPTION 'Sono gia tutti assegnati';	
    END IF;
    RETURN lista;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiCompetizioni()
RETURNS VARCHAR(50000) AS $$
DECLARE
    listaCompetizioni varchar(50000) := '';
    nome varchar(200);
BEGIN
    FOR nome IN (SELECT DISTINCT C.nome FROM competizioni_nazionali as C ) LOOP
        IF listaCompetizioni = '' THEN
            listaCompetizioni := nome;
        ELSE
            listaCompetizioni := listaCompetizioni || '_' || nome;
        END IF;
    END LOOP;
	FOR nome IN (SELECT DISTINCT T.nome FROM competizioni_non_nazionali AS T) LOOP
        IF listaCompetizioni = '' THEN
            listaCompetizioni := nome;
        ELSE
            listaCompetizioni := listaCompetizioni || '_' || nome;
        END IF;
    END LOOP;
    
    RETURN listaCompetizioni;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiGiocatori()
RETURNS VARCHAR(100000) AS $$
DECLARE
	nomeCognome calciatore%ROWTYPE;
	lista varchar(100000);
BEGIN
	FOR nomeCognome IN (SELECT * FROM Calciatore) LOOP
		-- Aggiungi una virgola solo se la lista non è vuota
		IF lista IS NULL THEN
			lista := nomeCognome.nome || ' ' || nomeCognome.cognome;
		ELSE
			lista := lista || ',' || nomeCognome.nome || ' ' || nomeCognome.cognome;
		END IF;
	END LOOP;
RETURN lista;	
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiGiocatoriUguali(nome1 VARCHAR(100), cognome1 VARCHAR(100))
RETURNS VARCHAR(5000) AS $$
DECLARE
	calciatore calciatore%ROWTYPE;
	lista varchar(5000);
BEGIN
	FOR calciatore IN (SELECT * FROM Calciatore AS c WHERE c.nome = nome1 AND c.cognome = cognome1 ) LOOP
		-- Aggiungi una virgola solo se la lista non è vuota
		IF lista IS NULL THEN
			lista := calciatore.nome || ' ' || calciatore.cognome || ' ' || calciatore.nazionalita || ' ' || CAST(calciatore.nascita AS varchar(10));
		ELSE
			lista := lista || ',' || calciatore.nome || ' ' || calciatore.cognome || ' ' || calciatore.nazionalita || ' ' || CAST(calciatore.nascita AS varchar(10));
		END IF;
	END LOOP;
RETURN lista;	
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiGiocatoriValidi(anno int)
RETURNS VARCHAR(100000) AS $$
DECLARE
	nomeCognome calciatore%ROWTYPE;
	lista VARCHAR(100000) := '';
BEGIN
	FOR nomeCognome IN (SELECT * FROM Calciatore c WHERE (EXTRACT(YEAR FROM c.nascita) - 16) <= anno) LOOP
		IF EXTRACT(YEAR FROM nomeCognome.DataRitiro) <= anno OR EXTRACT(YEAR FROM nomeCognome.DataRitiro) IS NULL THEN 
			-- Aggiungi una virgola solo se la lista non è vuota
			IF lista IS NULL OR lista = '' THEN
				lista := nomeCognome.nome || ' ' || nomeCognome.cognome;
			ELSE
				lista := lista || ',' || nomeCognome.nome || ' ' || nomeCognome.cognome;
			END IF;
		END IF;
	END LOOP;
	
	IF lista = '' THEN
		RAISE EXCEPTION 'Non ci sono giocatori Validi';
	END IF;	
	RETURN lista;	
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiIdGiocatore(nome1 VARCHAR(100), cognome VARCHAR(100), nazione1 VARCHAR(100), nascita1 DATE)
RETURNS VARCHAR(20) AS $$
DECLARE
	id varchar(20);
BEGIN
	IF nazione1 IS NULL THEN
	
		SELECT id_giocatore INTO id
		FROM Calciatore AS c
		WHERE c.nome = nome1 AND c.cognome = cognome1;
		
	ELSE
	
		SELECT id_giocatore INTO id
		FROM Calciatore AS c
		WHERE c.nome = nome1 AND c.cognome = cognome1 AND c.nazionalita = nazione1 AND c.nascita = nascita1;
	
	END IF;
	
	RETURN id;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiLastMil(idGio VARCHAR(100))
RETURNS DATE AS $$
DECLARE
	lastMil DATE;
BEGIN
	IF EXISTS(SELECT m.fine
   			FROM Militanza m	
    		WHERE m.giocatore = idgio
    		AND m.fine IS NULL) 
			THEN
			
			return null;
	ELSE
		
		SELECT m.fine
		INTO lastMil
		FROM Militanza m	
		WHERE m.giocatore = idgio
		AND m.fine = (SELECT MAX(fine)
					  FROM Militanza AS mi
					  WHERE mi.giocatore = idgio);

		return lastMil;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiRuoloCalciatoreDifficile(nome1 VARCHAR(100), cognome1 VARCHAR(100), nazione1 VARCHAR(100), nascita1 DATA)
RETURNS VARCHAR(20) AS $$
DECLARE
	ruolo VARCHAR(20);
BEGIN
	ruolo := convRuolo((SELECT R.ruolo
    					FROM RUOLO AS R
    					JOIN CALCIATORE AS C ON R.id_giocatore = C.id_giocatore
    					WHERE C.nome = nome1 AND C.cognome = cognome1 AND c.nazionalita = nazione1 AND c.nascita = nascita1));

	IF ruolo ILIKE 'portiere' THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END;


$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiRuoloCalciatoreFacile(nome1 VARCHAR(100), cognome1 VARCHAR(100))
RETURNS boolean AS $$
DECLARE
	ruolo VARCHAR(20);	
BEGIN
	ruolo := convRuolo((SELECT R.ruolo
    					FROM RUOLO AS R
    					JOIN CALCIATORE AS C ON R.id_giocatore = C.id_giocatore
    					WHERE C.nome = nome1 AND C.cognome = cognome1));

	IF ruolo ILIKE 'portiere' THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiSquadre()
RETURNS VARCHAR(5000) AS $$
DECLARE
	nome varchar(100);
	lista varchar(5000);
BEGIN
	FOR nome IN (SELECT nomeSquadra FROM squadre) LOOP
		-- Aggiungi una virgola solo se la lista non è vuota
		IF lista IS NULL THEN
			lista := nome;
		ELSE
			lista := lista || ',' || nome;
		END IF;
	END LOOP;
RETURN lista;	
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiSquadreIdoneePerTrofeo(anno int, nometrof VARCHAR(100))
RETURNS VARCHAR(50000) AS $$
DECLARE
	squadra VARCHAR(100);
	lista VARCHAR(50000);
BEGIN
	IF EXISTS(SELECT 1 FROM competizioni_nazionali WHERE nomeTrofeo ILIKE nomeTrof) THEN
	
		FOR squadra IN (SELECT G.squadra 
						FROM competizioni_nazionali AS N
						JOIN squadra_gioca_in_competizioni_nazionali AS G
						ON N.nome LIKE G.nome
						WHERE N.nomeTrofeo LIKE nomeTrof)
			LOOP
				IF lista IS NULL THEN
					lista := squadra;
				ELSE
					lista := lista || ',' || squadra;
				END IF;
			END LOOP;
	ELSE
			FOR squadra IN (SELECT G.squadra 
							FROM competizioni_non_nazionali AS N
							JOIN squadra_gioca_in_competizioni_non_nazionali AS G
							ON N.nome LIKE G.nome
							WHERE N.nomeTrofeo LIKE nomeTrof)
				LOOP
					IF lista IS NULL THEN
						lista := squadra;
					ELSE
						lista := lista || ',' || squadra;
					END IF;
			END LOOP;
	END IF;
	
	IF lista IS NULL THEN
		RAISE EXCEPTION 'Non ci sono squadre';
	END IF;
RETURN lista;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiTrofeoIndividuali()
RETURNS VARCHAR(50000) AS $$
DECLARE
    nomeT VARCHAR(200);
    listaTrofei VARCHAR(50000) := '';
BEGIN
    FOR nomeT IN (SELECT DISTINCT nome
                FROM trofeo_individuale
                WHERE vincitore IS NULL)
    LOOP
        IF listaTrofei = '' THEN
            listaTrofei := nomeT;
        ELSE
            listaTrofei := listaTrofei || ',' || nomeT;
        END IF;
    END LOOP;

    IF listaTrofei = '' THEN
        RAISE EXCEPTION 'Non ci sono trofei Disponibili';
    END IF;

    RETURN listaTrofei;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION prendiTrofeiSquadra()
RETURNS VARCHAR(100000) AS $$
DECLARE
	trofeo VARCHAR(200);
	lista VARCHAR(100000);
BEGIN
	FOR trofeo IN  (SELECT DISTINCT nome
					FROM trofeo_squadra
					WHERE squadra IS NULL)
		LOOP
			IF lista IS NULL THEN
				lista := trofeo;
			ELSE
				lista := lista || ',' || trofeo;
			END IF;
		END LOOP;
	
	IF lista IS NULL THEN
		RAISE EXCEPTION 'Non ci sono trofei di Squadra';
	END IF;
	
	RETURN lista;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION squadrenonidonee()
RETURNS VARCHAR(100) AS $$
DECLARE
	numGiocatori INT;
	competizioni varchar(100);
	squadre varchar(100);
BEGIN
	FOR competizioni IN (	SELECT DISTINCT nome 
							FROM squadra_gioca_in_competizioni_nazionali 
							WHERE EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year')) 
						LOOP

		FOR squadre IN (SELECT squadra 
						FROM squadra_gioca_in_competizioni_nazionali 
						WHERE nome = competizioni.nome) 
						LOOP

			SELECT COUNT(*) INTO numGiocatori 
			FROM rosa 
			WHERE squadra = squadre 
			AND EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year') 
			AND EXTRACT(MONTH FROM anno) = 12;

			IF numGiocatori NOT BETWEEN 16 AND 24 THEN
				DELETE FROM squadra_gioca_in_competizioni_nazionali 
				WHERE squadra = squadre 
				AND EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year');
			END IF;
		END LOOP;
	END LOOP;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE FUNCTION visualizzacal(valore VARCHAR(20))
RETURNS VARCHAR(100) AS $$
DECLARE
	lista VARCHAR(500000) := '';
    giocatore_row calciatore%ROWTYPE;
	valoreME varchar(10) := '';
	dataRi varchar(10) := '';
BEGIN
    FOR giocatore_row IN SELECT * FROM Calciatore AS C WHERE TRIM(C.nome) ILIKE TRIM(valore)
    LOOP
		IF giocatore_row.dataRitiro IS NULL THEN
			dataRi := 'vuoto';
		ELSE
			dataRi := CAST(giocatore_row.dataRitiro AS VARCHAR(10));
		END IF;
		IF giocatore_row.valoreMercato IS NULL THEN
			valoreME := 'vuoto';
		ELSE
			valoreME := CAST(giocatore_row.valoreMercato AS VARCHAR(10));
		END IF;
	
		IF lista = '' THEN
			lista := giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;         
		ELSE             
			lista := lista || ',' || giocatore_row.nome || ' ' || giocatore_row.cognome || ' ' || CAST(giocatore_row.nascita AS varchar(10)) || ' ' || giocatore_row.piedepr || ' ' || dataRi || ' ' || giocatore_row.nazionalita || ' ' || giocatore_row.id_giocatore || ' ' || valoreMe;
		END IF;
    END LOOP;
	
	RAISE NOTICE '%', lista;
	
	IF lista = '' THEN
		RAISE EXCEPTION 'Non esiste un giocatore con questo nome';
	END IF;

    RETURN lista;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE PROCEDURE eliminaGiocatore(id_gio VARCHAR(20))
AS $$
BEGIN
    -- Elimino da goalSubiti
    DELETE FROM goalSubiti AS g
    WHERE g.id_giocatore = id_gio;

    -- Elimino tutte le militanze dove è presente quel giocatore
    DELETE FROM Militanza AS m
    WHERE m.giocatore = id_gio;

    -- Elimino da ruoli
    DELETE FROM Ruolo AS r
    WHERE r.id_giocatore = id_gio;

    -- Elimino da rosa
    DELETE FROM Rosa AS r
    WHERE r.id_giocatore = id_gio;

    -- Elimino da trofeo_squadra_calciatore
    DELETE FROM trofeo_squadra_calciatore AS t
    WHERE t.calciatorev = id_gio;

    -- Elimino da calciatore_possiede_feature_caratteristiche
    DELETE FROM GIOCATORE_possiede_feature_caratteristiche AS c
    WHERE c.giocatore = id_gio;

    -- Elimino da trofeo individuale
    DELETE FROM trofeo_individuale 
    WHERE vincitore = id_gio;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE PROCEDURE inserisci_calciatore_ruolo_sponsor_squadra_militanza (nome C VARCHAR(100), cognomeC VARCHAR(100), nazioneC VARCHAR(100), dataNascitaC DATE, dataRitiroC DATE, piedePR VARCHAR(50), ruolo VARCHAR(200), sponsorNome VARCHAR(100), nomeSquadr VARCHAR(100), nazionalita VARCHAR(100), inizioMil DATE, fineMil DATE, tiriSegnati int, partiteGiocate int, goalSubiti int)
AS $$
DECLARE
    id_gio VARCHAR(20);
    id_mil VARCHAR(20);
BEGIN
    	-- Controllo se esiste già il calciatore
    	IF NOT EXISTS (SELECT 1
    		       FROM Calciatore AS c
    		       WHERE c.nome ILIKE nomeC AND c.cognome ILIKE cognomeC AND c.nazionalita ILIKE nazioneC AND nascita = dataNascitaC) 
		THEN
        	-- Non esiste il calciatore, passo al prossimo controllo       
        	IF nazionalita IS NOT NULL THEN

            		-- Se la nazionalità non è null, vuol dire che la squadra è stata inserita dall'admin
            		IF NOT EXISTS(SELECT 1   		
            			      FROM Squadre AS s
            			      WHERE s.nomeSquadra ILIKE nomeSquadr) 
				THEN
                		-- Controllo lo sponsor inserito
                		IF NOT EXISTS(SELECT 1 
                			      FROM Squadre
                			      WHERE nomeSponsor ILIKE sponsorNome) 
					THEN

                    			-- Genero un nuovo ID per il calciatore
                    			id_gio := genera_id('Calciatore', 'id_giocatore');

                    			-- Inserisco calciatore
                    			INSERT INTO Calciatore(nome, cognome, nazionalita, nascita, dataritiro, piedepr, id_giocatore)
                    			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

                    			-- Inserisco ruolo
                    			INSERT INTO Ruolo(ruolo, id_giocatore)
                    			VALUES (ruolo, id_gio);

                   				-- Inserisco sponsor
                    			INSERT INTO SponsorTec(nome)
                    			VALUES (sponsorNome);

                    			-- Inserisco squadra
                    			INSERT INTO Squadre(nomeSquadra, nazionalita, nomeSponsor)
                   				VALUES (nomeSquadr, nazionalita, sponsorNome);

                    			-- Genero un nuovo ID per la militanza
                    			id_mil := genera_id('Militanza', 'id_militanza');

                    			-- Inserisco militanza
                    			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
                    			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadr, id_gio, id_mil);
                   				
								-- Inserisco goalSubiti se non è null
                    			IF goalSubiti IS NOT NULL THEN
                        			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                        			VALUES (CAST(goalSubiti AS INT), id_gio, id_mil);
                    			END IF;
                		ELSE
                    			RAISE EXCEPTION 'Lo sponsor inserito è già presente';
                		END IF;
            		ELSE
                		RAISE EXCEPTION 'La squadra inserita è già presente';
            		END IF;
        	ELSE
			-- Se la nazionalità è null, l'admin non ha inserito la squadra, ma ha trovato una squadra già esistente

            		id_gio := genera_id('Calciatore', 'id_giocatore');

            		-- Inserisco calciatore
            		INSERT INTO Calciatore(nome, cognome, nazionalita, nascita, dataritiro, piedepr, id_giocatore)
            		VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

            		-- Inserisco ruolo
            		INSERT INTO Ruolo(ruolo, id_giocatore)
            		VALUES (ruolo, id_gio);

            		-- Genero un nuovo ID per la militanza
            		id_mil := genera_id('Militanza', 'id_militanza');

            		-- Inserisco militanza
            		INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
            		VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadr, id_gio, id_mil);

            		-- Inserisco goalSubiti se non è null
            		IF goalSubiti IS NOT NULL THEN

                		INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                		VALUES (CAST(goalSubiti AS INT), id_gio, id_mil);

            		END IF;
		END IF;
	ELSE
        	RAISE EXCEPTION 'Il calciatore è già presente';
    END IF;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE PROCEDURE inserisciVincitoreTrofeoDiSquadra(nomet varchar(200), annoW int, squadraW varchar(100))
AS $$
BEGIN 
	UPDATE trofeo_squadra
	SET squadra = squadraW
	WHERE annoVincita = annoW AND nome LIKE nomeT;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE PROCEDURE inserisciVincitoreTrofeoIndividuale(nomet varchar(200), annoW int, idGiocatore varchar(100))
AS $$
BEGIN 
	UPDATE trofeo_individuale
	SET vincitore = idGiocatore
	WHERE annoVincita = annoW AND nome LIKE nomeT;
END;
$$ LANGUAGE PLPGSQL;
----------------
CREATE OR REPLACE PROCEDURE insert_competizione_trofeosquadra (nomeCompetizione VARCHAR(200), annoInizio int, nazionalita VARCHAR(100), tipo VARCHAR(100), nomeTrofeo VARCHAR(100), annoFine int)
AS $$
DECLARE
    	competizioneNaz competizioni_nazionali%ROWTYPE;
    	competizioneNonNaz competizioni_non_nazionali%ROWTYPE;
    	trofeoSquadra trofeo_squadra%ROWTYPE;
BEGIN
    	IF nazionalita IS NOT NULL THEN
        	-- se nazionalita non è null, allora vuol dire che è una competizione nazionale
        	IF NOT EXISTS(	
				SELECT 1
				FROM competizioni_nazionali AS c
        			WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione))
		THEN
            		-- vuol dire che non esiste ancora una competizione con gli stessi dati
            		IF NOT EXISTS( 
							SELECT 1
            				FROM trofeo_squadra AS t
            				WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo))
			THEN
                		-- vuol dire che non esiste un trofeo con quel nome
						INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
						
                		INSERT INTO competizioni_nazionali(nome, nazione, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, nazionalita, annoInizio, nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Un trofeo con questo nome esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;

    	ELSIF tipo IS NOT NULL THEN
        	-- se tipo non è null, vuol dire che è stata inserita una competizione non nazionale
        	IF NOT EXISTS(
				SELECT 1
        			FROM competizioni_non_nazionali AS c
        			WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione)) 
		THEN
            		-- vuol dire che non esiste una competizione con questo nome
            		IF NOT EXISTS(
					SELECT 1
            				FROM trofeo_squadra AS t
            				WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo))
			THEN
                		-- vuol dire che non esiste un trofeo con questo nome
						INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
						
                		INSERT INTO competizioni_non_nazionali(nome, tipo, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, tipo, annoInizio, nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Il trofeo esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_militanza(id_giocatore VARCHAR(20), fineExMilitanza DATE, inizioNuovaMilitanza DATE, fineNuovaMilitanza DATE, squadra VARCHAR(100), tiriSeganti int, partiteGiocate int, goalSubiti int)
AS $$
DECLARE
	lastMil Militanza%ROWTYPE;
   	lastDate DATE;
    numM INT;
    id_mil varchar(20);
	
BEGIN
    	IF fineExMilitanza IS NOT NULL THEN

        		-- se non era stata impostata una data di fine militanza allora questo valore sarà diverso da null
        		-- prendo la militanza ancora in atto

        		SELECT *
        		INTO lastMil
        		FROM Militanza AS M
        		WHERE TRIM(M.giocatore) LIKE TRIM(id_giocatore) AND M.fine IS NULL;
		
			IF NOT(lastMil.squadra ILIKE squadra) THEN

        		IF fineExMilitanza >= NOW() 
                AND EXTRACT(MONTH FROM fineExMilitanza) IN (1, 7, 8, 9)  
				AND inizioNuovaMilitanza >= fineExMilitanza THEN            		
					-- mi assicuro che la fine della vecchia militanza 
                    --sia valida e la inserisco

            		UPDATE Militanza
            		SET fine = fineExMilitanza
            		WHERE TRIM(giocatore) LIKE TRIM(id_giocatore) AND fine IS NULL;
            		-- inserisco la nuova militanza senza controllare 
                    --la validità poiché già stato fatto sull'applicativo
            		
					id_mil := genera_id('Militanza', 'id_militanza');

            		INSERT INTO Militanza(inizio, fine, giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            		VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

            		IF goalSubiti IS NOT NULL THEN
                			
                        INSERT INTO goalSubiti
                        (goalSubiti, id_giocatore, id_militanza)
                		VALUES (CAST(goalSubiti AS INT), id_giocatore, id_mil);
            		END IF;
        		ELSE 
            		RAISE EXCEPTION 'Data fine vecchia Militanza non valida';
        		END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra1';
			END IF;
			
    	ELSE
		
        	SELECT *
			INTO lastMil
			FROM Militanza m
			WHERE TRIM(m.giocatore) = TRIM(id_giocatore)
			ORDER BY m.fine DESC
			LIMIT 1;
		
			IF NOT(lastMil.squadra ILIKE squadra) THEN

				IF inizioNuovaMilitanza >= lastMil.fine THEN      
                -- non faccio il controllo dei mesi perché già fatto sull'applicativo 

            		id_mil := genera_id('Militanza', 'id_militanza');

            		INSERT INTO Militanza(inizio, fine, giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            		VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

	    			IF goalSubiti IS NOT NULL THEN
                		
                        INSERT INTO goalSubiti
                        (goalSubiti, id_giocatore, id_militanza)
                		VALUES (CAST(goalSubiti AS INT), id_giocatore, id_mil);
            		
					END IF;
        		ELSE
            		RAISE EXCEPTION 'Data inizio Militanza non valida';
        		END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra2';
			END IF;
    	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_nuovo_trofeo(nomeTrofeo VARCHAR(200), anno int)
AS $$
BEGIN
    	-- Controllo che non esista già un trofeo con questo nome
    	IF NOT EXISTS (SELECT * FROM trofeo_individuale WHERE nome ILIKE nomeTrofeo) THEN

        	INSERT INTO trofeo_individuale(nome, annoVincita)
        	VALUES (nomeTrofeo, anno);

    	ELSE
        	RAISE EXCEPTION 'Il trofeo esiste già';
    	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_sponsor_secondari(nomeSponsor VARCHAR(100), finanziamento int, nomeSquadra VARCHAR(100))
AS $$
DECLARE
    sponsor_exists sponsor_secondari%ROWTYPE;
    sponsor_tec_exists sponsortec%ROWTYPE;
BEGIN
    -- Controllo che lo sponsor non sia già di un'altra squadra

	IF NOT EXISTS (
			SELECT 1
    			FROM sponsor_secondari
    			WHERE nome ILIKE nomeSponsor)
		THEN 
       	
		-- Faccio lo stesso controllo ma per gli sponsorTec
        	IF NOT EXISTS(
				SELECT 1
        			FROM sponsortec
        			WHERE nome ILIKE nomeSponsor)
			THEN

            		-- A questo punto lo sponsor è valido e lo inserisco
            		INSERT INTO sponsor_secondari(nome, squadra)
            		VALUES (nomeSponsor, nomeSquadra);

			IF finanziament IS NOT NULL THEN

				UPDATE sponsor_secondari
				SET finanziamento = finanziament
				WHERE nome = nomeSponsor;
			END IF;
        	ELSE
            		RAISE EXCEPTION 'Lo sponsor è già sponsor tecnico di un altra squadra';    
        	END IF;
    	ELSE
        	RAISE EXCEPTION 'Lo sponsor è già sponsor secondario di un altra squadra';
    	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_squadra(nomeSq VARCHAR(100), nomeSp VARCHAR(100), nazione VARCHAR(100))
AS $$
DECLARE
BEGIN
	IF NOT EXISTS( SELECT 1 FROM squadre WHERE nomeSquadra ILIKE nomeSq) THEN
		IF NOT EXISTS( SELECT 1 FROM squadre WHERE nomeSponsor ILIKE nomeSp) 
		AND NOT EXISTs( SELECT 1 FROM sponsor_secondari WHERE nome ILIKE nomeSp) then
			
			INSERT INTO SponsorTec(nome)
			VALUES (nomeSp);
			
			INSERT INTO Squadre(nomeSquadra, nazionalita, nomeSponsor)
			VALUES (nomeSq, nazione, nomeSp);
		ELSE
			RAISE EXCEPTION 'Sponsor gia esistente';
		END IF;
	ELSE
		RAISE EXCEPTION 'Squadra gia esistente';
	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_squadra_on_trofeoSquadra(nazione VARCHAR(100), nomeCampionato VARCHAR(100), squadraVincitrice VARCHAR(100))
AS $$
DECLARE
	compNaz competizioni_nazionali%ROWTYPE;
	compNonNaz competizioni_non_nazionali%ROWTYPE;
	trofeo trofeo_squadra%ROWTYPE;
BEGIN
	IF nazione IS NOT NULL THEN
		--significa che è un campionato nazionale
	
		SELECT *
		INTO compNaz
		FROM competizioni_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato AND c.nazione ILIKE nazione;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNaz.nometrofeo AND t.squadra IS NULL;
	ELSE
		--significa che è un campionato non nazionale

		SELECT *
		INTO compNonNaz
		FROM competizioni_non_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNonNaz.nometrofeo AND t.squadra IS NULL;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_squadrGiocaInCompetizione(squadra VARCHAR(100), competizioneNome VARCHAR(100)
AS $$
DECLARE
	compNaz competizioni_nazionali%ROWTYPE;
	compNonNaz competizioni_non_nazionali%ROWTYPE;
BEGIN	
	--Controllo il nome per vedere se è una competizione nazionale o meno
	IF EXISTS (SELECT * FROM competizioni_nazionali WHERE nome = competizioneNome) THEN

		--allora inserisco in squadra_gioca_in_competizione_nazionale

		INSERT INTO squadra_gioca_in_competizioni_nazionali(squadra, nome, anno)
		VALUES (squadra, competizioneNome, anno);
	ELSE
		--allora inserisco in squadra_gioca_in_competizione_non_nazionale

		INSERT INTO squadra_gioca_in_competizioni_non_nazionali(squadra, nome, anno)
		VALUES (squadra, competizioneNome, anno);
	END IF;
END;
$$ LANGUAGE PLPGSQL;
----------
CREATE OR REPLACE PROCEDURE insert_vincitore_int_trofeo_individuale(id_giocatore VARCHAR(20), anno int, trofeo VARCHAR(100))
AS $$
BEGIN
	IF (SELECT vincitore
			FROM trofeo_individuale
			WHERE nome = trofeo AND annoVincita = anno) IS null
	THEN
	
		UPDATE trofeo_individuale
		SET vincitore = id_giocatore
		WHERE nome = trofeo AND annoVincita = anno;
	
	ELSE
		RAISE EXCEPTION 'Il vincitore è gia stato assegnato';
	END IF;
END;
$$ LANGUAGE PLPGSQL;

